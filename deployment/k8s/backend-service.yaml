apiVersion: v1
kind: Service
metadata:
  name: indorsement-backend-service
  namespace: indorsement-production
  labels:
    app: indorsement-backend
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  sessionAffinity: None
  selector:
    app: indorsement-backend
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 3000
  - name: metrics
    protocol: TCP
    port: 9090
    targetPort: 9090

---
apiVersion: v1
kind: Service
metadata:
  name: indorsement-backend-headless
  namespace: indorsement-production
  labels:
    app: indorsement-backend
    tier: backend
    service-type: headless
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: indorsement-backend
  ports:
  - name: http
    protocol: TCP
    port: 3000
    targetPort: 3000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: indorsement-ingress
  namespace: indorsement-production
  labels:
    app: indorsement
  annotations:
    # Ingress Controller
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL/TLS
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate Limiting
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Security Headers
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.indorsement.com,https://admin.indorsement.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Performance
    nginx.ingress.kubernetes.io/proxy-buffer-size: "16k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/client-max-body-size: "50m"
    
    # WebSocket Support
    nginx.ingress.kubernetes.io/proxy-set-headers: "ingress-nginx/websocket-headers"
    
    # Compression
    nginx.ingress.kubernetes.io/enable-brotli: "true"
    
    # Security
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Frame-Options DENY;
      add_header X-Content-Type-Options nosniff;
      add_header X-XSS-Protection "1; mode=block";
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' wss: https:; media-src 'self' https:; object-src 'none'; frame-src 'none'; base-uri 'self'; form-action 'self';" always;
    
    # Load Balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    nginx.ingress.kubernetes.io/load-balance: "ewma"
    
    # Monitoring
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Request-ID: $req_id";
      access_log /var/log/nginx/access.log main;

spec:
  tls:
  - hosts:
    - api.indorsement.com
    - ws.indorsement.com
    secretName: indorsement-api-tls
  rules:
  # Main API
  - host: api.indorsement.com
    http:
      paths:
      # Health checks (no rate limiting)
      - path: /health
        pathType: Exact
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      - path: /ready
        pathType: Exact
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      
      # Authentication routes (stricter rate limiting)
      - path: /api/v1/auth
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      
      # API routes
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      
      # Static files
      - path: /static
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      
      # Root path
      - path: /
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
  
  # WebSocket endpoint
  - host: ws.indorsement.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: indorsement-admin-ingress
  namespace: indorsement-production
  labels:
    app: indorsement
    tier: admin
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Admin-specific security
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12,192.168.0.0/16"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: admin-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "Administration Area"
    
    # Stricter rate limiting for admin
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
spec:
  tls:
  - hosts:
    - admin.indorsement.com
    secretName: indorsement-admin-tls
  rules:
  - host: admin.indorsement.com
    http:
      paths:
      - path: /admin
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 80
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: indorsement-backend-service
            port:
              number: 9090

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: indorsement-backend-metrics
  namespace: indorsement-production
  labels:
    app: indorsement-backend
    release: prometheus
spec:
  selector:
    matchLabels:
      app: indorsement-backend
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    scheme: http
    honorLabels: true

---
# Network Policy for Backend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: indorsement-backend-netpol
  namespace: indorsement-production
spec:
  podSelector:
    matchLabels:
      app: indorsement-backend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow ingress from nginx-ingress
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 3000
  # Allow metrics scraping from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  # Allow health checks from kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 3000
  egress:
  # Allow egress to database
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432
  # Allow egress to Redis
  - to:
    - namespaceSelector:
        matchLabels:
          name: cache
    ports:
    - protocol: TCP
      port: 6379
  # Allow HTTPS traffic
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow DNS
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53